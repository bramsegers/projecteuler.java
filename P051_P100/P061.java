package P051_P100;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers 
 are all figurate (polygonal) numbers and are generated by the following formulae:
 
 Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 Square	 	        P4,n=n^2                1, 4, 9, 16, 25, ...
 Pentagonal	 	P5,n=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
 Hexagonal	 	P6,n=n(2n-1)	 	1, 6, 15, 28, 45, ...
 Heptagonal	 	P7,n=n(5n-3)/2	 	1, 7, 18, 34, 55, ...
 Octagonal	 	P8,n=n(3n-2)	 	1, 8, 21, 40, 65, ...
 
 The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting 
 properties. The set is cyclic, in that the last two digits of each number is 
 the first two digits of the next number (including the last number with the first).
 Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal 
 (P5,44=2882), is represented by a different number in the set. This is the only 
 set of 4-digit numbers with this property.
  
 Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
 each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, 
 and octagonal, is represented by a different number in the set.
 */
public class P061 {

    static Map<Integer, Map<Integer, Integer>> polygons;
    static List<List<Integer>> permutations;
    static int sum;

    static int solve() {
        polygons = new HashMap<>();
        permutations = new ArrayList<>();
        for (int i = 3; i <= 8; i++) {
            Map<Integer, Integer> poly = new HashMap<>();
            int p, n = 0;
            while ((p = getPoly(i, ++n)) < 10000) {
                if (p >= 1000) {
                    poly.put(p, n);
                }
            }
            polygons.put(i, poly);
        }

        getPermutations(new ArrayList<Integer>(), new ArrayList<>(Arrays.asList(4, 5, 6, 7, 8)));
        for (List<Integer> perm : permutations) {
            perm.add(0, 3);
            for (int i : polygons.get(3).keySet()) {
                List<Integer> pol = new ArrayList<>();
                pol.add(i);
                solve(0, pol, perm);
            }
        }
        return sum;
    }

    static void getPermutations(List<Integer> done, List<Integer> todo) {
        if (todo.isEmpty()) {
            permutations.add(done);
        } else {
            for (Integer i : todo) {
                List<Integer> done2 = new ArrayList<>(done);
                List<Integer> todo2 = new ArrayList<>(todo);
                done2.add(i);
                todo2.remove(i);
                getPermutations(done2, todo2);
            }
        }
    }

    static void solve(int p, List<Integer> pol, List<Integer> perm) {
        if (p == perm.size() - 1) {
            if (pol.get(p) % 100 == pol.get(0) / 100) {
                printSolution(pol, perm);
            }
        } else {
            for (int n : polygons.get(perm.get(p + 1)).keySet()) {
                if (pol.get(p) % 100 == n / 100) {
                    List<Integer> pol2 = new ArrayList<>(pol);
                    pol2.add(n);
                    solve(p + 1, pol2, perm);
                }
            }
        }
    }

    static void printSolution(List<Integer> pol, List<Integer> perm) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < perm.size(); i++) {
            int n = perm.get(i);
            sb.append(String.format("P(%d,%d)=%d%n", n, polygons.get(n).get(pol.get(i)), pol.get(i)));
            sum += pol.get(i);
        }
        sb.append(String.format("Sum:%d", sum));
        System.out.println(sb);
    }

    static int getPoly(int i, int n) {
        switch (i) {
            case 3:
                return n * (n + 1) / 2;
            case 4:
                return n * n;
            case 5:
                return n * (3 * n - 1) / 2;
            case 6:
                return n * (2 * n - 1);
            case 7:
                return n * (5 * n - 3) / 2;
            case 8:
                return n * (3 * n - 2);
        }
        return -1;
    }

    public static void main(String[] args) {
        System.out.println(P061.solve());
    }
}
